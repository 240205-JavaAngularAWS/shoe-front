import { Component, OnInit } from '@angular/core';
import { Products } from '../../interfaces/products';
import { Seller } from '../../interfaces/seller';
import { ProductsService } from '../../services/products.service';

@Component({
  selector: 'seller-categories',
  templateUrl: './seller-categories.component.html',
  styleUrl: './seller-categories.component.css',
})
export class SellerCategoriesComponent {

  products: Products[] = [];
  // counter: number = 5;
  newProductName: string = '';
  newPrice: number = 0;
  newColor: string = '';
  newGender: string = '';
  newCategory: string = '';
  newQuantity: number = 0;
  // newSeller: Seller = { companyName: '' };
  newImage: string = '';
  newDescription: string = '';
  errorMessage: string = '';
  successMessage: string = '';
  // hide: boolean = true;

  constructor (private productService: ProductsService) {}

  ngOnInit(): void {
      // Attempt to retrieve seller's ID from session storage
      const sellerIdString = sessionStorage.getItem("id");
      if (sellerIdString) {
        const sellerId = JSON.parse(sellerIdString);
        this.loadSellerProducts(sellerId);
      } else {
        console.error("Seller ID not found. Ensure the user is logged in.");
        // Optionally, redirect to login or show an error message
      }
    }


  createProduct(): void {
    const sellerIdString = sessionStorage.getItem("id");
    if (sellerIdString) {
      const sellerId = JSON.parse(sellerIdString);
      
      if (!this.validateProductInput()) {
        this.errorMessage = 'Please fill in all the fields.';
        return;
      }

      let newProduct: Products = {
        id: 0, // Should be auto-generated by the backend
        productName: this.newProductName,
        price: this.newPrice,
        color: this.newColor,
        gender: this.newGender,
        category: this.newCategory,
        quantity: this.newQuantity,
        seller: { id: sellerId }, // Associate with logged-in seller
        imageUrl: this.newImage,
        description: this.newDescription,
      };

      //Call addProduct from ProductService
      this.productService.addProduct(newProduct).subscribe({
        next: (response) => {
          console.log('Product added successfully', response);
          this.successMessage = 'Product added successfully!';
          this.resetProductForm(); //clear the form
          this.loadSellerProducts(sellerId);  //refresh products list
      }, 
      error: (error) => {
        console.error('Error adding product', error);
        this.errorMessage = 'Error adding product.';
      }
    });
  } else {
      console.log("Seller ID not found. Ensure the user is logged in.");
      this.errorMessage = "Seller ID not found. Ensure the user is logged in.";
    }
  }

  loadSellerProducts(sellerId: number): void {
    this.productService.findProductBySellerId(sellerId).subscribe({
      next: (data) => {
      this.products = data;
    },
    error: (error) => {
      console.error('Error loading products', error);
      this.errorMessage = 'Error loading products.';
    }
  });
}

  validateProductInput(): boolean {
    //Check if any of the product input fields are empty
    const isProductNameValid = this.newProductName.trim() != '';
    const isPriceValid = this.newPrice > 0;
    const isColorValid = this.newColor.trim() !== '';
    const isGenderValid = this.newGender.trim() !== '';
    const isCategoryValid = this.newCategory.trim() !== '';
    const isQuantityValid = this.newQuantity > 0;
    const isImageValid = this.newImage.trim() !== '';
    const isDescriptionValid = this.newDescription.trim() !== '';
    return isProductNameValid && isPriceValid && isColorValid && isGenderValid && isCategoryValid && isQuantityValid && isImageValid && isDescriptionValid;
  }

  resetProductForm() {
    this.newProductName = '';
    this.newPrice = 0;
    this.newColor = '';
    this.newGender = '';
    this.newCategory = '';
    this.newQuantity = 0;
    this.newImage = '';
    this.newDescription = '';
    this.successMessage = '';
    this.errorMessage =  '';

  }
}



    // Now we're at the part where we try to create the product
    // This is the hard-coded add product
    // let newProduct: Products = {
    //   id: 0, //should be auto-generated by the backend
    //   price: this.newPrice,
    //   color: this.newColor,
    //   gender: this.newGender,
    //   category: this.newCategory,
    //   quantity: this.newQuantity,
    //   seller: this.newSeller,
    //   imageUrl: this.newImage,
    //   description: this.newDescription,
    // };
    // this.products.push(newProduct);

    
    // Now we're at the part where we try to create the product
    // Assuming the backend associates the product witht the seller using the seller's ID
//     if (sellerId !== null) {
//     let newProduct: Products = {
//       id: 0, //should be auto-generated by the backend
//       price: this.newPrice,
//       color: this.newColor,
//       gender: this.newGender,
//       category: this.newCategory,
//       quantity: this.newQuantity,
//       seller: { id: sellerId },
//       imageUrl: this.newImage,
//       description: this.newDescription,
//     };


//     // clear inputs
//     this.newPrice = 0;
//     this.newColor = '';
//     this.newGender = '';
//     this.newCategory = '';
//     this.newQuantity = 0;
//     this.newSeller = {};
//      this.newImage = '';
//      this.newDescription = '';
//     this.hide = true;
//   }



//   ngOnInit() {

//     let one = 1;
    
//     this.productService.findProductBySellerId(one).subscribe((data) => {
//       this.products = data;
//     });
//   }
// }
